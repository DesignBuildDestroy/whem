# Design Build Destroy 
# Whole Home Energy Meter Logger 2020
# -Get Serial Port data from Arduino
# -Split and save to database with time stamps
# -Timestamp generated by Python not Arduino
# -Serial Data send about every 6 seconds at current Arduino ADC prescale speed pretty consistently

import serial
import sqlite3
import time
import pytz
import datetime as dt
import os.path

# Format and Clean the serial line received and save to database
def ProcessandSave(datas):
    dataArr = datas.replace("\x00","")           # Strip out NULL characters usually at startup
    dataArr = datas.replace(" ", ",")            # Replace space with , from serial string

    dataTimeStamp = str(round(time.time()))      # UTC Seconds from Epoch

    tz = pytz.timezone('America/Chicago')        # TimeZone
    dataDate = str(dt.datetime.now(tz).date())   # Current date readable formatted at local timezone
    dataTime = str(dt.datetime.now(tz).time())   # Current time readable formatted at local timezone

    # Insert values into SQL statement
    sqlInsert = ("INSERT INTO readings (timestamp,date,time,va,ia,rpa,apa,pfa,vb,ib,rpb,apb,pfb) VALUES (" 
        + dataTimeStamp + ",'" + dataDate + "','" + dataTime + "'," + dataArr + ");")

    # Get the working DIR of the database, may be different in cron instance from actual path??
    baseDir = os.path.dirname(os.path.abspath(__file__))
    dbPath = os.path.join(baseDir, "whem.db")

    if (dataArr == ""):
        return(0)

    # Arduino sketch start up prints start first if reset occurs to catch
    # Log this later to see if Arduino ever resets unexpectidly
    if (dataArr == "start"):
        return(0)

    # Execute the Insert to Database
    try:
        sqlConn = sqlite3.connect(dbPath)
        sql = sqlConn.cursor()
        sql.execute(sqlInsert)
        sqlConn.commit()
        sqlConn.close()
    except Exception as e:
        print(e)
        print(sqlInsert)
        return(0)

    return(0)


# Main Loop do this forever
def main():
    # Open Serial port
    ser = serial.Serial(port='/dev/ttyAMA0', baudrate=115200, timeout=None)
    ser.flushInput()

    while True:
        try:
            # Get the serial line
            ser_bytes = ser.readline().decode('ascii')

            # Filter nonsense characters
            datas = ser_bytes.rstrip().lstrip()

            # Format and Save to DB
            ProcessandSave(datas)
        except Exception as e:
            # Failed for some reason end for now
            print(e)
            break

    return(0) # END

if __name__ == '__main__':
    main()
